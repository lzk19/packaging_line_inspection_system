{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\前端5.7\\src\\views\\Handover.vue?vue&type=template&id=7ecdb306&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\src\\views\\Handover.vue","mtime":1648631459610},{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651901507383},{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651901510183},{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651901507383},{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\vue-loader\\lib\\index.js","mtime":1651901509384}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}