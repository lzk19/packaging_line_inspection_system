{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\前端5.7\\src\\views\\Event.vue?vue&type=style&index=0&id=55555bd0&lang=less&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\src\\views\\Event.vue","mtime":1651732630627},{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\css-loader\\dist\\cjs.js","mtime":1651901507998},{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1651901510113},{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\postcss-loader\\src\\index.js","mtime":1651901508984},{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\less-loader\\dist\\cjs.js","mtime":1651901508660},{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651901507383},{"path":"C:\\Users\\Administrator\\Desktop\\前端5.7\\node_modules\\vue-loader\\lib\\index.js","mtime":1651901509384}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5lbC10YWJsZSB7CiAgbWFyZ2luLXRvcDogMTVweDsKICBmb250LXNpemU6IDE1cHg7Cn0KCi51cGxvYWQgewogIHdpZHRoOiAxNTBweDsKfQo="},{"version":3,"sources":["Event.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgZA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Event.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <!-- 面包屑 -->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>巡检事件板块</el-breadcrumb-item>\n      <el-breadcrumb-item>主要设备问题</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <el-card>\n      <el-button type=\"primary\" @click=\"addEventDialogVisible = true\"\n        >新建事件</el-button\n      >\n      <!-- <el-button type=\"primary\"\n                 @click=\"addEventDialogVisible = true\">修改事件</el-button> -->\n      <el-button type=\"primary\" @click=\"addEventDialogVisible = true\"\n        >合并事件</el-button\n      >\n      <el-table :data=\"eventList\" border stripe>\n        <!-- 把列的type设置成index类型就成为了索引列 -->\n        <el-table-column type=\"index\"></el-table-column>\n\n        <el-table-column label=\"线号\" prop=\"line\"> </el-table-column>\n        <el-table-column label=\"日期\" prop=\"date\"> </el-table-column>\n\n        <el-table-column label=\"机器名\" prop=\"machineName\"> </el-table-column>\n\n        <el-table-column label=\"事件名\" prop=\"eventName\"> </el-table-column>\n        <el-table-column label=\"事件类型\" prop=\"eventType\"> </el-table-column>\n        <el-table-column label=\"附件\" prop=\"fileName\"> </el-table-column>\n        <el-table-column label=\"事件操作\" width=\"180px\">\n          <!-- scope里封存了该行用户的所有信息 -->\n          <template slot-scope=\"scope\">\n            <!-- 填写事件内容按钮 -->\n\n            <el-tooltip content=\"填写事件内容\" placement=\"top\" effect=\"light\">\n              <el-button\n                type=\"primary\"\n                icon=\"el-icon-edit\"\n                plain\n                round\n                size=\"mini\"\n                @click=\"showUpdateDialog(scope.row.id)\"\n              ></el-button>\n            </el-tooltip>\n\n            <el-tooltip content=\"下载附件\" placement=\"top\" effect=\"light\">\n              <el-button\n                type=\"success\"\n                icon=\"el-icon-download\"\n                plain\n                round\n                size=\"mini\"\n                @click=\"downloadFile(scope.row.url)\"\n              ></el-button>\n            </el-tooltip>\n\n            <!-- 事件关闭按钮 -->\n            <el-tooltip content=\"关闭事件\" placement=\"top\" effect=\"light\">\n              <el-button\n                type=\"danger\"\n                icon=\"el-icon-delete\"\n                round\n                plain\n                size=\"mini\"\n                @click=\"closeEvent(scope.row.id)\"\n              ></el-button>\n            </el-tooltip>\n          </template>\n        </el-table-column>\n      </el-table>\n      <!-- element分页组件 没有设置每页最大变化数 current-page：当前页 page-size表示每页最大数据条数 total表示总数据数-->\n      <!-- 分页 -->\n      <el-pagination\n        @current-change=\"handleCurrentChange\"\n        :current-page.sync=\"eventQueryInfo.pageNum\"\n        :page-size=\"eventQueryInfo.pageSize\"\n        layout=\"total, prev, pager, next,jumper\"\n        :total=\"total\"\n      >\n      </el-pagination>\n    </el-card>\n\n    <!-- 新增事件区域 visible:表示是否显示对话框  @close关闭tag时触发的事件-->\n    <el-dialog\n      title=\"添加事件\"\n      :visible.sync=\"addEventDialogVisible\"\n      width=\"40%\"\n      @close=\"addEventDialogClosed\"\n      v-dialogDrag\n    >\n      <!--red:校验规则的内容 存放在addFormRef下 -->\n      <!-- 添加用户对话框里的表单内容 -->\n      <el-form\n        :model=\"addEventForm\"\n        :rules=\"addEventFormRules\"\n        ref=\"addEventFormRef\"\n        label-width=\"80px\"\n      >\n        <!-- 机器名称 -->\n        <el-form-item label=\"线号\" prop=\"line\">\n          <el-input v-model=\"addEventForm.line\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"日期\" prop=\"date\">\n          <el-input v-model=\"addEventForm.date\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"机器名称\" prop=\"machineName\">\n          <el-input v-model=\"addEventForm.machineName\"></el-input>\n        </el-form-item>\n        <!-- 事件名称 -->\n        <el-form-item label=\"事件名称\" prop=\"eventName\">\n          <el-input v-model=\"addEventForm.eventName\"></el-input>\n        </el-form-item>\n      </el-form>\n      <!-- 表单底部按钮 -->\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addEventDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"addEvent\">确定</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 填写事件内容的对话框 -->\n    <el-dialog\n      title=\"填写事件内容\"\n      :visible.sync=\"updateDialogVisible\"\n      width=\"42%\"\n      @close=\"updateDialogClosed\"\n      v-dialogDrag\n    >\n      <!--ref:校验规则的内容 updateForm -->\n      <!-- 填写事件内容对话框里的表单内容 -->\n      <el-form\n        :model=\"updateForm\"\n        :rules=\"updateFormRules\"\n        ref=\"updateFormRef\"\n        label-width=\"70px\"\n      >\n        <!-- 类型 -->\n        <el-form-item label=\"类型\" prop=\"eventType\">\n          <el-select\n            v-model=\"updateForm.eventType\"\n            placeholder=\"请选择事件类型\"\n            style=\"width: 160px\"\n          >\n            <el-option\n              v-for=\"item in typeOptions\"\n              :key=\"item.value\"\n              :value=\"item.value\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n        <!-- 描述 -->\n        <el-form-item label=\"描述\" prop=\"describe1\">\n          <el-input type=\"textarea\" v-model=\"updateForm.describe1\"></el-input>\n        </el-form-item>\n        <!-- 发生点 -->\n        <el-form-item label=\"地点\" prop=\"happenPlace\">\n          <el-input type=\"textarea\" v-model=\"updateForm.happenPlace\"></el-input>\n        </el-form-item>\n        <!-- 原因 -->\n        <el-form-item label=\"原因\" prop=\"reason\">\n          <el-input type=\"textarea\" v-model=\"updateForm.reason\"></el-input>\n        </el-form-item>\n        <!-- 问题缺陷 -->\n        <el-form-item label=\"缺陷\" prop=\"problemDefect\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"updateForm.problemDefect\"\n          ></el-input>\n        </el-form-item>\n        <!-- 行动 -->\n        <el-form-item label=\"行动\" prop=\"actions\">\n          <el-input type=\"textarea\" v-model=\"updateForm.actions\"></el-input>\n        </el-form-item>\n        <!-- 跟踪 -->\n        <el-form-item label=\"跟踪\" prop=\"tracks\">\n          <el-input type=\"textarea\" v-model=\"updateForm.tracks\"></el-input>\n        </el-form-item>\n\n        <!-- 上传文件 -->\n\n        <el-form-item>\n          <el-upload\n            :action=\"'http://localhost:9000/uploadFile'\"\n            :on-success=\"handleFileUploadSuccess\"\n            ref=\"upload\"\n          >\n            <el-button type=\"success\" class=\"upload\">上传附件</el-button>\n          </el-upload>\n        </el-form-item>\n      </el-form>\n      <!-- 表单底部按钮 -->\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"updateDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"updateEventInfo\">确定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  //这个方法是一进入页面就显示数据\n  created() {\n    // 调用当前的getUserList方法\n    this.getEventList();\n  },\n  data() {\n    return {\n      url: \"\",\n\n      typeOptions: [\n        {\n          value: \"操作\",\n        },\n        {\n          value: \"设备\",\n        },\n        {\n          value: \"来源\",\n        },\n        {\n          value: \"方法\",\n        },\n        {\n          value: \"环境\",\n        },\n      ],\n      typeValue: \"\",\n\n      addEventDialogVisible: false, //添加事件的对话框\n\n      addEventForm: {\n        line: \"\",\n        date: \"\",\n        machineName: \"\",\n        eventName: \"\",\n      },\n\n      eventList: [], //事件列表\n\n      total: 0, //总记录数\n\n      eventQueryInfo: {\n        query: \"\", //查询信息\n        pageNum: 1, //当前页\n        pageSize: 4, //每页最大数\n      },\n      addEventFormRules: {\n        line: [{ required: true, message: \"请输入线号\", trigger: \"blur\" }],\n        date: [{ required: true, message: \"请输入日期\", trigger: \"blur\" }],\n        machineName: [\n          { required: true, message: \"请输入机器名称\", trigger: \"blur\" },\n        ],\n        eventName: [\n          { required: true, message: \"请输入事件名称\", trigger: \"blur\" },\n        ],\n      },\n\n      updateFormRules: {\n        describe1: [{ message: \"请输入事件描述\", trigger: \"blur\" }],\n        happenPlace: [{ message: \"请输入发生点\", trigger: \"blur\" }],\n        reason: [{ message: \"请输入原因\", trigger: \"blur\" }],\n        problemDefect: [{ message: \"请输入问题缺陷\", trigger: \"blur\" }],\n        actions: [{ message: \"请输入行动\", trigger: \"blur\" }],\n        tracks: [{ message: \"请输入跟踪\", trigger: \"blur\" }],\n      },\n\n      //修改用户信息\n      updateForm: {},\n      //显示隐藏修改用户栏对话框\n      updateDialogVisible: false,\n    };\n  },\n  methods: {\n    //上传附件\n    handleFileUploadSuccess(res) {\n      this.updateForm.fileName = res.name;\n      this.updateForm.url = res.url;\n      this.$message.success(\"上传附件成功！\");\n    },\n\n    //下载附件\n    downloadFile(url) {\n      window.open(url);\n    },\n\n    // 获取所有事件\n    async getEventList() {\n      const { data: res } = await this.$http.get(\"getAllEvent\", {\n        params: this.eventQueryInfo,\n      }); //get请求方法\n      this.eventList = res.data;\n      this.total = res.numbers;\n    },\n\n    addEvent() {\n      this.$refs.addEventFormRef.validate(async (valid) => {\n        if (!valid) return;\n        const { data: res } = await this.$http.post(\n          \"addEvent\",\n          this.addEventForm\n        );\n        if (res != \"success\") {\n          return this.$message.error(\"新建事件失败！\");\n        }\n        this.$message.success(\"新建事件成功！\"); //提示信息\n        this.getEventList();\n        this.addEventDialogVisible = false;\n      });\n    },\n\n    addEventDialogClosed() {\n      this.$refs.addEventFormRef.resetFields();\n    },\n\n    //pageNum的触发动作\n    handleCurrentChange(newPage) {\n      this.eventQueryInfo.pageNum = newPage;\n      this.getEventList();\n    },\n\n    //显示修改用户信息的对话框\n    async showUpdateDialog(id) {\n      const { data: res } = await this.$http.get(\"getUpdateEvent?id=\" + id);\n      this.updateForm = res; //查询出用户信息并反填回修改表单\n      this.updateDialogVisible = true; //开启编辑对话框\n    },\n\n    //关闭窗口\n    updateDialogClosed() {\n      this.$refs.updateFormRef.resetFields(); //重置信息\n    },\n\n    //确认修改\n    updateEventInfo() {\n      this.$refs.updateFormRef.validate(async (valid) => {\n        if (!valid) return; //验证失败\n\n        // 发起修改请求\n        const { data: res } = await this.$http.put(\n          \"updateEvent\",\n          this.updateForm\n        );\n        if (res != \"success\") return this.$message.error(\"完善事件内容失败！\");\n        this.$message.success(\"完善事件内容成功！\");\n        this.$refs[\"upload\"].clearFiles();\n        //隐藏修改用户信息对话框\n        this.updateDialogVisible = false;\n\n        this.getEventList();\n      });\n    },\n\n    async closeEvent(id) {\n      const { data: res1 } = await this.$http.get(\"getUpdateEvent?id=\" + id);\n      this.updateForm = res1; //查询出用户信息并反填回修改表单\n      if (\n        this.updateForm.describe1 == \"\" ||\n        this.updateForm.describe1 == undefined ||\n        this.updateForm.eventType == \"\" ||\n        this.updateForm.eventType == undefined ||\n        this.updateForm.happenPlace == \"\" ||\n        this.updateForm.happenPlace == undefined ||\n        this.updateForm.reason == \"\" ||\n        this.updateForm.reason == undefined ||\n        this.updateForm.problemDefect == \"\" ||\n        this.updateForm.problemDefect == undefined ||\n        this.updateForm.actions == \"\" ||\n        this.updateForm.actions == undefined ||\n        this.updateForm.tracks == \"\" ||\n        this.updateForm.tracks == undefined\n      ) {\n        return this.$message.error(\"请先完善事件内容\");\n      } else {\n        const confirmResult = await this.$confirm(\n          \"此操作将关闭事件，是否继续？\",\n          \"提示\",\n          {\n            confirmButtonText: \"确定\",\n            cancelButtonText: \"取消\",\n            type: \"warning\",\n          }\n        ).catch((err) => err); //把结果信息放进了confirmResult中\n        if (confirmResult != \"confirm\") {\n          return this.$message.info(\"已取消关闭\");\n        }\n        const { data: res } = await this.$http.delete(\"/deleteEvent?id=\" + id);\n        if (res != \"success\") {\n          return this.$message.error(\"关闭事件失败！\");\n        }\n        this.$message.success(\"关闭事件成功！\");\n        this.getEventList();\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.el-table {\n  margin-top: 15px;\n  font-size: 15px;\n}\n\n.upload {\n  width: 150px;\n}\n</style>\n"]}]}